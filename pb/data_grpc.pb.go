// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package heroes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeroesServiceClient is the client API for HeroesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeroesServiceClient interface {
	// Unary Server
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// Server Streaming
	CallTeam(ctx context.Context, in *CallTeamRequest, opts ...grpc.CallOption) (HeroesService_CallTeamClient, error)
}

type heroesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHeroesServiceClient(cc grpc.ClientConnInterface) HeroesServiceClient {
	return &heroesServiceClient{cc}
}

func (c *heroesServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/heroes.HeroesService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heroesServiceClient) CallTeam(ctx context.Context, in *CallTeamRequest, opts ...grpc.CallOption) (HeroesService_CallTeamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeroesService_ServiceDesc.Streams[0], "/heroes.HeroesService/CallTeam", opts...)
	if err != nil {
		return nil, err
	}
	x := &heroesServiceCallTeamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeroesService_CallTeamClient interface {
	Recv() (*CallTeamResponse, error)
	grpc.ClientStream
}

type heroesServiceCallTeamClient struct {
	grpc.ClientStream
}

func (x *heroesServiceCallTeamClient) Recv() (*CallTeamResponse, error) {
	m := new(CallTeamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeroesServiceServer is the server API for HeroesService service.
// All implementations must embed UnimplementedHeroesServiceServer
// for forward compatibility
type HeroesServiceServer interface {
	// Unary Server
	Call(context.Context, *CallRequest) (*CallResponse, error)
	// Server Streaming
	CallTeam(*CallTeamRequest, HeroesService_CallTeamServer) error
	mustEmbedUnimplementedHeroesServiceServer()
}

// UnimplementedHeroesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHeroesServiceServer struct {
}

func (UnimplementedHeroesServiceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedHeroesServiceServer) CallTeam(*CallTeamRequest, HeroesService_CallTeamServer) error {
	return status.Errorf(codes.Unimplemented, "method CallTeam not implemented")
}
func (UnimplementedHeroesServiceServer) mustEmbedUnimplementedHeroesServiceServer() {}

// UnsafeHeroesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeroesServiceServer will
// result in compilation errors.
type UnsafeHeroesServiceServer interface {
	mustEmbedUnimplementedHeroesServiceServer()
}

func RegisterHeroesServiceServer(s grpc.ServiceRegistrar, srv HeroesServiceServer) {
	s.RegisterService(&HeroesService_ServiceDesc, srv)
}

func _HeroesService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeroesServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heroes.HeroesService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeroesServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeroesService_CallTeam_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallTeamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeroesServiceServer).CallTeam(m, &heroesServiceCallTeamServer{stream})
}

type HeroesService_CallTeamServer interface {
	Send(*CallTeamResponse) error
	grpc.ServerStream
}

type heroesServiceCallTeamServer struct {
	grpc.ServerStream
}

func (x *heroesServiceCallTeamServer) Send(m *CallTeamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// HeroesService_ServiceDesc is the grpc.ServiceDesc for HeroesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeroesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heroes.HeroesService",
	HandlerType: (*HeroesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _HeroesService_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallTeam",
			Handler:       _HeroesService_CallTeam_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/data.proto",
}
